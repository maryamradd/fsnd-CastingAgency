{
	"info": {
		"_postman_id": "a1f23c46-1de1-4d6f-9314-ca5a18a2187c",
		"name": "CastingAgency",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CastingAssistantRole",
			"item": [
				{
					"name": "Get all actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get actors', ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"actors array returned\", () => {\r",
									"    let {actors} = pm.response.json();\r",
									"    return actors.length >=1;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actors",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actors"
							]
						},
						"description": "retrive all actors from the database"
					},
					"response": []
				},
				{
					"name": "Get all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get movies', ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"movies array returned\", () => {\r",
									"    let {movies} = pm.response.json();\r",
									"    return movies.length >=1;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/movies",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"movies"
							]
						},
						"description": "retrive all movies from the database"
					},
					"response": []
				},
				{
					"name": "Get actor by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get actor by id', ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"actor object returned\", () => {\r",
									"    let {actor} = pm.response.json();\r",
									"    return actor.first_name !== null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actors/1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actors",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail get actor by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Fail get actor by id by passing 99999', ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"success message is false\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.success).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actors/99999",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actors",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get movie by id', ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"movie object returned\", () => {\r",
									"    let {movie} = pm.response.json();\r",
									"    return movie.title !== null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/movies/1",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"movies",
								"1"
							]
						},
						"description": "retrive movie by id"
					},
					"response": []
				},
				{
					"name": "Fail get movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Fail get movie by id by passing 99999', ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"success message is false\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.success).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/movies/99999",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"movies",
								"99999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CastingDirectorRole",
			"item": [
				{
					"name": "Add a new actor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date= Date.now();\r",
									"let actor_name = 'QA' + date;\r",
									"pm.environment.set('ACTOR_NAME', actor_name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add a new actor', ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"added actor id is in response\", ()=> {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.added_actor).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.environment.set('ACTOR_ID', pm.response.json().added_actor);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"{{ACTOR_NAME}}\",\r\n    \"last_name\": \"QA\",\r\n    \"age\": 21,\r\n    \"gender\": \"Male\",\r\n    \"image_link\": \"https://\",\r\n    \"seeking_role\": true,\r\n    \"movies\": {\r\n        \"movie_ids\": [4]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/actors",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actors"
							]
						},
						"description": "add a new actor to the database"
					},
					"response": []
				},
				{
					"name": "Fail add a new actor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date= Date.now();\r",
									"let actor_name = 'QA' + date;\r",
									"pm.environment.set('ACTOR_NAME', actor_name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('authorization header is required', ()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"pm.test(\"succes value is false\", ()=> {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"{{ACTOR_NAME}}\",\r\n    \"last_name\": \"QA\",\r\n    \"age\": 21,\r\n    \"gender\": \"Male\",\r\n    \"image_link\": \"https://\",\r\n    \"seeking_role\": true,\r\n    \"movies\": {\r\n        \"movie_ids\": [4]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/actors",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actors"
							]
						},
						"description": "add a new actor to the database"
					},
					"response": []
				},
				{
					"name": "Update actor details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date= Date.now();\r",
									"let actor_name = 'UPDATED' + date;\r",
									"pm.environment.set('ACTOR_NAME', actor_name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('updated actor by id successful', ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"updated actor id is in response\", ()=> {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.updated_actor).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"{{ACTOR_NAME}}\",\r\n    \"last_name\": \"UPDATED\",\r\n    \"age\": 21,\r\n    \"gender\": \"Male\",\r\n    \"image_link\": \"https://\",\r\n    \"seeking_role\": false,\r\n    \"movies\": {\r\n        \"movie_ids\": [4]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/actors/{{ACTOR_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actors",
								"{{ACTOR_ID}}"
							]
						},
						"description": "edit specified actor"
					},
					"response": []
				},
				{
					"name": "Fail update actor details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date= Date.now();\r",
									"let actor_name = 'UPDATED' + date;\r",
									"pm.environment.set('ACTOR_NAME', actor_name);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Fail update actor by id by passing 99999', ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"success message is false\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"{{ACTOR_NAME}}\",\r\n    \"last_name\": \"UPDATED\",\r\n    \"age\": 21,\r\n    \"gender\": \"Male\",\r\n    \"image_link\": \"https://\",\r\n    \"seeking_role\": false,\r\n    \"movies\": {\r\n        \"movie_ids\": [4]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/actors/99999",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actors",
								"99999"
							]
						},
						"description": "edit specified actor"
					},
					"response": []
				},
				{
					"name": "Delete actor by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Delete actor by id success', ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"success message is true\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actors/{{ACTOR_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actors",
								"{{ACTOR_ID}}"
							]
						},
						"description": "delete specified actor"
					},
					"response": []
				},
				{
					"name": "Fail delete actor by  invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Fail delete actor by id by passing 99999', ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"success message is false\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actors/99999",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actors",
								"99999"
							]
						},
						"description": "delete specified actor"
					},
					"response": []
				},
				{
					"name": "Update movie details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date= Date.now();\r",
									"let movie_title = 'UPDATED' + date;\r",
									"pm.environment.set('MOVIE_TITLE', movie_title);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('updated movie by id successful', ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"updated movie id is in response\", ()=> {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.updated_movie).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{MOVIE_TITLE}}\",\r\n    \"genre\": \"Horror\",\r\n    \"poster\": \"https://\",\r\n    \"release_date\": \"2022-03-14\",\r\n    \"seeking_talent\": false,\r\n    \"actors\": {\r\n        \"actor_ids\": [\r\n            1\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/movies/{{MOVIE_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"movies",
								"{{MOVIE_ID}}"
							]
						},
						"description": "edit specified actor"
					},
					"response": []
				},
				{
					"name": "Fail update movie details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date= Date.now();\r",
									"let movie_title = 'UPDATED' + date;\r",
									"pm.environment.set('MOVIE_TITLE', movie_title);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Fail update movie by id by passing 99999', ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"success message is false\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{MOVIE_TITLE}}\",\r\n    \"genre\": \"Horror\",\r\n    \"poster\": \"https://\",\r\n    \"release_date\": \"2022-03-14\",\r\n    \"seeking_talent\": false,\r\n    \"actors\": {\r\n        \"actor_ids\": [\r\n            1\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/movies/9999",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"movies",
								"9999"
							]
						},
						"description": "edit specified actor"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{DIRECTOR_TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ExecutiveProducerRole",
			"item": [
				{
					"name": "Add a new movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Add a new movie', ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"added movie id is in response\", ()=> {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.added_movie).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.environment.set('MOVIE_ID', pm.response.json().added_movie);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date= Date.now();\r",
									"let movie_title = 'QA' + date;\r",
									"pm.environment.set('MOVIE_TITLE', movie_title);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{MOVIE_TITLE}}\",\r\n    \"genre\": \"Horror\",\r\n    \"poster\": \"https://\",\r\n    \"release_date\": \"2022-03-14\",\r\n    \"seeking_talent\": false,\r\n    \"actors\": {\r\n        \"actor_ids\": [\r\n            1\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/movies",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail add a new movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Permission not found', ()=>{\r",
									"    pm.response.to.have.status(403);\r",
									"})\r",
									"\r",
									"pm.test(\"succes value is false\", ()=> {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date= Date.now();\r",
									"let movie_title = 'QA' + date;\r",
									"pm.environment.set('MOVIE_TITLE', movie_title);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{DIRECTOR_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{MOVIE_TITLE}}\",\r\n    \"genre\": \"Horror\",\r\n    \"poster\": \"https://\",\r\n    \"release_date\": \"2022-03-14\",\r\n    \"seeking_talent\": false,\r\n    \"actors\": {\r\n        \"actor_ids\": [\r\n            1\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/movies",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete movie by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Delete movie by id success', ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"success message is true\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"     pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/movies/{{MOVIE_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"movies",
								"{{MOVIE_ID}}"
							]
						},
						"description": "delete specified actor"
					},
					"response": []
				},
				{
					"name": "Fail delete movie by  invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Fail delete movie by id by passing 99999', ()=>{\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test(\"success message is false\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/actors/99999",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"actors",
								"99999"
							]
						},
						"description": "delete specified actor"
					},
					"response": []
				},
				{
					"name": "Fail delete movie with wrong permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Permission not found.', ()=>{\r",
									"    pm.response.to.have.status(403);\r",
									"})\r",
									"\r",
									"pm.test(\"success message is false\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{DIRECTOR_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/movies/{{MOVIE_ID}}",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"movies",
								"{{MOVIE_ID}}"
							]
						},
						"description": "delete specified actor"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{PRODUCER_TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Get user role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('User role successful', ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"user role returned\", ()=> {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.role).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{DIRECTOR_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/role",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"role"
					]
				},
				"description": "parse permissions in the token and return the user role"
			},
			"response": []
		},
		{
			"name": "Fail get user role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Authorization header is expected', ()=>{\r",
							"    pm.response.to.have.status(401);\r",
							"})\r",
							"\r",
							"pm.test(\"success message is false\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.success).to.eql(false);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/role",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"role"
					]
				},
				"description": "parse permissions in the token and return the user role"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://127.0.0.1:5000/"
		}
	]
}